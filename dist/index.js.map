{
  "version": 3,
  "sources": ["../lib/smeanlipw.js", "../lib/ndarray.js", "../lib/main.js", "../lib/index.js"],
  "sourcesContent": ["/**\n* @license Apache-2.0\n*\n* Copyright (c) 2020 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nvar float64ToFloat32 = require( '@stdlib/number-float64-base-to-float32' );\nvar sapxsumpw = require( '@stdlib/blas-ext-base-sapxsumpw' ).ndarray;\n\n\n// MAIN //\n\n/**\n* Computes the arithmetic mean of a single-precision floating-point strided array using a one-pass trial mean algorithm with pairwise summation.\n*\n* ## References\n*\n* -   Ling, Robert F. 1974. \"Comparison of Several Algorithms for Computing Sample Means and Variances.\" _Journal of the American Statistical Association_ 69 (348). American Statistical Association, Taylor & Francis, Ltd.: 859\u201366. doi:[10.2307/2286154](https://doi.org/10.2307/2286154).\n*\n* @param {PositiveInteger} N - number of indexed elements\n* @param {Float32Array} x - input array\n* @param {integer} stride - stride length\n* @returns {number} arithmetic mean\n*\n* @example\n* var Float32Array = require( '@stdlib/array-float32' );\n*\n* var x = new Float32Array( [ 1.0, -2.0, 2.0 ] );\n* var N = x.length;\n*\n* var v = smeanlipw( N, x, 1 );\n* // returns ~0.3333\n*/\nfunction smeanlipw( N, x, stride ) {\n\tvar ix;\n\n\tif ( N <= 0 ) {\n\t\treturn NaN;\n\t}\n\tif ( N === 1 || stride === 0 ) {\n\t\treturn x[ 0 ];\n\t}\n\tif ( stride < 0 ) {\n\t\tix = (1-N) * stride;\n\t} else {\n\t\tix = 0;\n\t}\n\treturn float64ToFloat32( x[ ix ] + float64ToFloat32( sapxsumpw( N-1, -x[ ix ], x, stride, ix+stride ) / N ) ); // eslint-disable-line max-len\n}\n\n\n// EXPORTS //\n\nmodule.exports = smeanlipw;\n", "/**\n* @license Apache-2.0\n*\n* Copyright (c) 2020 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nvar float64ToFloat32 = require( '@stdlib/number-float64-base-to-float32' );\nvar sapxsumpw = require( '@stdlib/blas-ext-base-sapxsumpw' ).ndarray;\n\n\n// MAIN //\n\n/**\n* Computes the arithmetic mean of a single-precision floating-point strided array using a one-pass trial mean algorithm with pairwise summation.\n*\n* ## References\n*\n* -   Ling, Robert F. 1974. \"Comparison of Several Algorithms for Computing Sample Means and Variances.\" _Journal of the American Statistical Association_ 69 (348). American Statistical Association, Taylor & Francis, Ltd.: 859\u201366. doi:[10.2307/2286154](https://doi.org/10.2307/2286154).\n*\n* @param {PositiveInteger} N - number of indexed elements\n* @param {Float32Array} x - input array\n* @param {integer} stride - stride length\n* @param {NonNegativeInteger} offset - starting index\n* @returns {number} arithmetic mean\n*\n* @example\n* var Float32Array = require( '@stdlib/array-float32' );\n* var floor = require( '@stdlib/math-base-special-floor' );\n*\n* var x = new Float32Array( [ 2.0, 1.0, 2.0, -2.0, -2.0, 2.0, 3.0, 4.0 ] );\n* var N = floor( x.length / 2 );\n*\n* var v = smeanlipw( N, x, 2, 1 );\n* // returns 1.25\n*/\nfunction smeanlipw( N, x, stride, offset ) {\n\tif ( N <= 0 ) {\n\t\treturn NaN;\n\t}\n\tif ( N === 1 || stride === 0 ) {\n\t\treturn x[ offset ];\n\t}\n\treturn float64ToFloat32( x[ offset ] + float64ToFloat32( sapxsumpw( N-1, -x[ offset ], x, stride, offset+stride ) / N ) ); // eslint-disable-line max-len\n}\n\n\n// EXPORTS //\n\nmodule.exports = smeanlipw;\n", "/**\n* @license Apache-2.0\n*\n* Copyright (c) 2020 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nvar setReadOnly = require( '@stdlib/utils-define-nonenumerable-read-only-property' );\nvar smeanlipw = require( './smeanlipw.js' );\nvar ndarray = require( './ndarray.js' );\n\n\n// MAIN //\n\nsetReadOnly( smeanlipw, 'ndarray', ndarray );\n\n\n// EXPORTS //\n\nmodule.exports = smeanlipw;\n", "/**\n* @license Apache-2.0\n*\n* Copyright (c) 2020 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n/**\n* Compute the arithmetic mean of a single-precision floating-point strided array using a one-pass trial mean algorithm with pairwise summation.\n*\n* @module @stdlib/stats-base-smeanlipw\n*\n* @example\n* var Float32Array = require( '@stdlib/array-float32' );\n* var smeanlipw = require( '@stdlib/stats-base-smeanlipw' );\n*\n* var x = new Float32Array( [ 1.0, -2.0, 2.0 ] );\n* var N = x.length;\n*\n* var v = smeanlipw( N, x, 1 );\n* // returns ~0.3333\n*\n* @example\n* var Float32Array = require( '@stdlib/array-float32' );\n* var floor = require( '@stdlib/math-base-special-floor' );\n* var smeanlipw = require( '@stdlib/stats-base-smeanlipw' );\n*\n* var x = new Float32Array( [ 2.0, 1.0, 2.0, -2.0, -2.0, 2.0, 3.0, 4.0 ] );\n* var N = floor( x.length / 2 );\n*\n* var v = smeanlipw.ndarray( N, x, 2, 1 );\n* // returns 1.25\n*/\n\n// MODULES //\n\nvar join = require( 'path' ).join;\nvar tryRequire = require( '@stdlib/utils-try-require' );\nvar isError = require( '@stdlib/assert-is-error' );\nvar main = require( './main.js' );\n\n\n// MAIN //\n\nvar smeanlipw;\nvar tmp = tryRequire( join( __dirname, './native.js' ) );\nif ( isError( tmp ) ) {\n\tsmeanlipw = main;\n} else {\n\tsmeanlipw = tmp;\n}\n\n\n// EXPORTS //\n\nmodule.exports = smeanlipw;\n\n// exports: { \"ndarray\": \"smeanlipw.ndarray\" }\n"],
  "mappings": "uGAAA,IAAAA,EAAAC,EAAA,SAAAC,EAAAC,EAAA,cAsBA,IAAIC,EAAmB,QAAS,wCAAyC,EACrEC,EAAY,QAAS,iCAAkC,EAAE,QA0B7D,SAASC,EAAWC,EAAGC,EAAGC,EAAS,CAClC,IAAIC,EAEJ,OAAKH,GAAK,EACF,IAEHA,IAAM,GAAKE,IAAW,EACnBD,EAAG,CAAE,GAERC,EAAS,EACbC,GAAM,EAAEH,GAAKE,EAEbC,EAAK,EAECN,EAAkBI,EAAGE,CAAG,EAAIN,EAAkBC,EAAWE,EAAE,EAAG,CAACC,EAAGE,CAAG,EAAGF,EAAGC,EAAQC,EAAGD,CAAO,EAAIF,CAAE,CAAE,EAC7G,CAKAJ,EAAO,QAAUG,ICrEjB,IAAAK,EAAAC,EAAA,SAAAC,EAAAC,EAAA,cAsBA,IAAIC,EAAmB,QAAS,wCAAyC,EACrEC,EAAY,QAAS,iCAAkC,EAAE,QA4B7D,SAASC,EAAWC,EAAGC,EAAGC,EAAQC,EAAS,CAC1C,OAAKH,GAAK,EACF,IAEHA,IAAM,GAAKE,IAAW,EACnBD,EAAGE,CAAO,EAEXN,EAAkBI,EAAGE,CAAO,EAAIN,EAAkBC,EAAWE,EAAE,EAAG,CAACC,EAAGE,CAAO,EAAGF,EAAGC,EAAQC,EAAOD,CAAO,EAAIF,CAAE,CAAE,CACzH,CAKAJ,EAAO,QAAUG,IChEjB,IAAAK,EAAAC,EAAA,SAAAC,EAAAC,EAAA,cAsBA,IAAIC,EAAc,QAAS,uDAAwD,EAC/EC,EAAY,IACZC,EAAU,IAKdF,EAAaC,EAAW,UAAWC,CAAQ,EAK3CH,EAAO,QAAUE,ICejB,IAAIE,EAAO,QAAS,MAAO,EAAE,KACzBC,EAAa,QAAS,2BAA4B,EAClDC,EAAU,QAAS,yBAA0B,EAC7CC,EAAO,IAKPC,EACAC,EAAMJ,EAAYD,EAAM,UAAW,aAAc,CAAE,EAClDE,EAASG,CAAI,EACjBD,EAAYD,EAEZC,EAAYC,EAMb,OAAO,QAAUD",
  "names": ["require_smeanlipw", "__commonJSMin", "exports", "module", "float64ToFloat32", "sapxsumpw", "smeanlipw", "N", "x", "stride", "ix", "require_ndarray", "__commonJSMin", "exports", "module", "float64ToFloat32", "sapxsumpw", "smeanlipw", "N", "x", "stride", "offset", "require_main", "__commonJSMin", "exports", "module", "setReadOnly", "smeanlipw", "ndarray", "join", "tryRequire", "isError", "main", "smeanlipw", "tmp"]
}
